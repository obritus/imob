<h2 class="mb-5">Adicionar novo empreendimento</h2>

{{>_empreendimento_form}}

<script>
	const Cidades = fetch('/api/cidades/')

	const GetBairro = (cidade_id, bairro_id) => {
		bairroForm.innerHTML = null //LIMPA A LISTA ATUAL
		const Bairro = fetch('/api/bairros/' + cidade_id)
		Bairro.then(data => {
			data.json().then(bairros => {
				bairros.map(({ _id, name }) => {
					const Render = `<option value="${_id}">${name}</option>`
					bairroForm.innerHTML += Render
				})
				bairroForm.value = bairro_id || null
			})
		})
	}

	const GetCidade = async (cidade_id, bairro_id) => {
		Cidades.then(data => {
			data.json().then(cidades => {
				cidades.map(({ _id, name }) => {
					const Render = `<option value="${_id}">${name}</option>`
					cidadeForm.innerHTML += Render
				})
				const GetOption = document.querySelector(`option[value="${cidade_id}"]`)
				cidadeForm.value = cidade_id || null
			})
			return GetBairro(cidade_id, bairro_id)
		})
	}

	const ShowImagesBox = () => {
		imagesBox.classList.add('show')
		imagesBox.scrollIntoView()
	}

	GetCidade()

	document.querySelector('[data-js="form_empreendimento"]')
		.addEventListener('submit', function(e) {
			e.preventDefault()
			const BlockInputs = () => {
				const GetFormElements =
					document.querySelectorAll('form input, form textarea, form select')
				GetFormElements.forEach(e => e.disabled = true)
			}
			const dados = {
				title: titleForm.value,
				price: priceForm.value,
				status: statusForm.value,
				type: statusForm.value,
				cidade: cidadeForm.value,
				bairro: bairroForm.value,
				quartos: quartosForm.value,
				suites: suitesForm.value,
				banheiros: banheirosForm.value,
				vagas_garagem: vagasForm.value,
				google_maps: googleForm.value,
				details: detailsForm.value
			}
			sessionStorage.setItem('dados', JSON.stringify(dados))
			BlockInputs()
			ShowImagesBox()
		})

	cidadeForm.addEventListener('change', function (e) {GetBairro(this.value)})

	dropZone.ondragover =  function () {
		this.classList.add('active')
		return false
	}
	dropZone.ondragleave = function () {
		this.classList.remove('active')
		return false
	}
	dropZone.ondrop = function (e) {
		const upload = files => {
			const data = new FormData()

			for(x = 0; x < files.length; x++) {
				data.append('file[]', files[x])
			}

			fetch('/dashboard/teste_images', {
				method: 'POST',
				headers: {
					"Content-Type": "You will perhaps need to define a content-type here"
				},
				body: data
			}).then(
				response => console.log(response.json())
			).then(
				success => console.log(success)
			).catch(
				error => console.error(error)
			)
		}
		e.preventDefault()
		upload(e.dataTransfer.files)
	}
</script>