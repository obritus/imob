<h2 class="mb-5">Adicionar novo empreendimento</h2>

{{>_empreendimento_form}}

<script>
	const Cidades = fetch('/api/cidades/')

	const GetBairro = (cidade_id) => {
		bairroForm.innerHTML = null //LIMPA A LISTA ATUAL
		const Bairro = fetch('/api/bairros/' + cidade_id)
		Bairro.then(data => {
			data.json().then(bairros => {
				bairros.map(({ _id, name }) => {
					const Render = `<option value="${_id}">${name}</option>`
					bairroForm.innerHTML += Render
				})
				bairroForm.value = bairroForm.options[0].value
			})
		})
	}

	const GetCidade = async () => {
		Cidades.then(data => {
			data.json().then(cidades => {
				cidades.map(({ _id, name }) => {
					const Render = `<option value="${_id}">${name}</option>`
					cidadeForm.innerHTML += Render
				})
				cidadeForm.value = cidadeForm.options[0].value
				return GetBairro(cidadeForm.value)
			})
		})
	}

	const ShowImagesBox = () => {
		imagesBox.classList.add('show')
		imagesBox.scrollIntoView()
	}

	GetCidade()

	document.querySelector('[data-js="form_empreendimento"]')
		.addEventListener('submit', function(e) {
			e.preventDefault()
			const BlockInputs = () => {
				const GetFormElements =
					document.querySelectorAll('form input, form textarea, form select')
				GetFormElements.forEach(e => e.disabled = true)
			}
			const dados = {
				title: titleForm.value,
				type: typeForm.value,
				categoria: categoriaForm.value,
				price: priceForm.value,

				cidade: cidadeForm.value,
				bairro: bairroForm.value,
				google_maps: googleForm.value,

				quartos: quartosForm.value,
				suites: suitesForm.value,
				banheiros: banheirosForm.value,
				vagas_garagem: vagasForm.value,
				details: detailsForm.value,

				status: statusForm.checked,
			}
			sessionStorage.setItem('dados', JSON.stringify(dados))
			fetch('/api/empreendimentos/', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json'
				},
				body: JSON.stringify(dados)
			}).then(data => data.json()).then(body => {
				sessionStorage.setItem('empreendimento_id', body)
				BlockInputs()
				ShowImagesBox()
			}).catch(err => console.error(err))
		})

	cidadeForm.addEventListener('change', function (e) {GetBairro(this.value)})

	dropZone.ondragover =  function () {
		this.classList.add('active')
		return false
	}
	dropZone.ondragleave = function () {
		this.classList.remove('active')
		return false
	}
	dropZone.ondrop = function (e) {
		const upload = files => {
			const data = new FormData()
			//data.append('teste', sessionStorage.getItem('empreendimento_id'))

			for(x = 0; x < files.length; x++) {
				data.append('images[]', files[x])
			}

			console.log(data)

			fetch('/api/images/', {
				method: 'POST',
				body: data
			}).then(response => response.json().then(data => {
				console.log(data)
			})
			).catch(err => console.error(err))
		}
		e.preventDefault()
		upload(e.dataTransfer.files)
	}
</script>